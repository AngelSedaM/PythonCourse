//Panda
Load data from different sources.
Search for particular rows or olumns.
Calculate aggregate.

//Working with a CSV

Import pandas as pandas

Read CSV
df = pd.read_csv('ransom.csv')

Show data
print(df)

Inspect Dataframe
Shows rows
df.head()

Shows the dataframe information
df.info()

# Import pandas under the alias pd
import pandas as pd

# Load the CSV "credit_records.csv"
credit_records = pd.read_csv("credit_records.csv")

# Display the first five rows of credit_records using the .head() method
print(credit_records.head(5))

#Use .info() to inspect the DataFrame credit_records
print(credit_records.info())

//Select columns

Use in a calculation
credit.price.sum()

Used to plot dataplt.plot(ransom['letter'], ransom['frequency])

Columns are string, 
Selecting with brackets and string
suspect =credit_records['suspect'] 
print(suspect)

Selecting with a dot
price =credit_records.price 
print(price)

If the column have numbers or different characters use [], not a dot.

//Selecting rows with logic 
Logical statement

question  = 12*8
solution =96
question == solution
--true

<,<=,>,>=,==

Not to !=

Select rows with comparison
credit_records[credit_records.price > 20.00]
dataframe name[logical statement]

# Select the dogs where Age is greater than 2
greater_than_2 = mpr[mpr.Age > 2]
print(greater_than_2)

# Select the dogs whose Status is equal to Still Missing
still_missing = mpr[mpr.Status == 'Still Missing']
print(still_missing)

# Select all dogs whose Dog Breed is not equal to Poodle
not_poodle = mpr[mpr['Dog Breed'] != 'Poodle']
print(not_poodle)

# Select purchases from 'Pet Paradise'
purchase = credit_records[credit_records.location == 'Pet Paradise']

# Display
print(purchase)





















